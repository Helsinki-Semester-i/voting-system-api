{
	"info": {
		"_postman_id": "9e8eda69-3764-4cf9-9575-33140d366c4c",
		"name": "API Voting System",
		"description": "# Voting System API\n\nThis project enables the creation of anonymous and non-anonymous polls for specific users.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c41f230-a738-4d98-b92b-ec806cf9d4d2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const userSchema = {",
									"  \"required\": [\"id\", \"first_name\", \"last_name\", \"email\", \"phone\"],",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\",",
									"      \"minimum\": 0,",
									"    },",
									"    \"first_name\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1,",
									"      \"maxLength\": 25",
									"    },",
									"    \"last_name\": {",
									"      \"type\": \"string\",",
									"      \"minLength\": 1,",
									"      \"maxLength\": 25",
									"    },",
									"    \"email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"string\"",
									"    },",
									"  }",
									"};",
									"",
									"var jsonData = pm.response.json()",
									"pm.environment.set(\"userEmail\", jsonData.email);",
									"pm.environment.set(\"userSchema\", userSchema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"PostmanTestCreate3\",\n\t\"last_name\": \"PostmanTestCreate13\",\n\t\"email\": \"postmanTestCreate3@mail.com\",\n\t\"phone\": 9876543219\n}"
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "The endpoint `POST /user` creates a new user using name and email as body params"
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5076bdf-7543-4f49-b730-cc58e0d5bb30",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const userSchema = pm.environment.get(\"userSchema\");",
									"",
									"pm.test('Matches User property value', () => {",
									"    _.each(pm.response.json(), (arrItem) => {",
									"        tests[\"User is valid\"] = tv4.validate(arrItem, userSchema);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "The endpoint `GET /users` returns a list of created users"
					},
					"response": []
				},
				{
					"name": "Get user with email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "486c8f81-869a-4257-85e9-9a544d9cd6a4",
								"exec": [
									"",
									"const email = pm.environment.get(\"userEmail\");",
									"pm.variables.set('USER_EMAIL', email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a589c24b-7244-4748-8293-ff890d482929",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"var IdSchema = {",
									"  \"id\": {",
									"    \"type\": \"integer\"",
									"  }",
									"};",
									"",
									"tests[\"Id is valid\"] = tv4.validate(data, IdSchema);",
									"",
									"pm.environment.set(\"userId\", data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/byMail/{{USER_EMAIL}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"byMail",
								"{{USER_EMAIL}}"
							]
						},
						"description": "The endpoint `GET /users/{{USER_EMAIL}}` retrieves information about the user with its email"
					},
					"response": []
				},
				{
					"name": "Get user with Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "38bc716c-6fd7-47bf-b39a-18b8b8e25039",
								"exec": [
									"",
									"const ID = pm.environment.get(\"userId\");",
									"pm.variables.set('USER_ID', ID);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f0d53e6-508e-4c74-add9-098057e735e1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// postman.setNextRequest(\"Create new Poll\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{USER_ID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						},
						"description": "The endpoint `GET users/{{id}}` returns informattion about a single user using its ID"
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4567b723-1101-47d4-9e79-6fc9e95c1b33",
								"exec": [
									"const ID = pm.environment.get(\"userId\");",
									"pm.variables.set('USER_ID', ID);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a9dfb9bc-70b7-44ca-bdcf-6f43161f5554",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const ID = pm.environment.get(\"userId\");",
									"",
									"pm.test(\"Body matches string response\", function () {",
									"    pm.expect(pm.response.text()).to.include(`User modified with ID: ${ID}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\": \"PostmanUpdateCreate\",\n\t\"last_name\": \"PostmanUpdateCreate\",\n\t\"email\": \"PostmanUpdateCreate@updatedmail.com\",\n\t\"phone\": 1212121212\n}"
						},
						"url": {
							"raw": "{{url}}/users/{{USER_ID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						},
						"description": "The endpoint `PUT /users/{{id}}` update an user's name and email"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5a6ed8e2-2c9d-415d-b7c3-f99e2e3721cc",
								"exec": [
									"const ID = pm.environment.get(\"userId\");",
									"pm.variables.set('USER_ID', ID);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b55aac8-187d-4beb-acad-6e2369151c90",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const ID = pm.environment.get(\"userId\");",
									"",
									"pm.test(\"Body matches string response\", function () {",
									"    pm.expect(pm.response.text()).to.include(`User deleted with ID: ${ID}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{USER_ID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{USER_ID}}"
							]
						},
						"description": "The endpoint `DELETE users/{{id}}` deletes the user using its ID"
					},
					"response": []
				}
			],
			"description": "Endpoints related to the user resource",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c682ff58-a722-4ac8-848f-add440b08fb5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7b11e4af-9cfd-4611-aa50-e83781832de4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Polls",
			"item": [
				{
					"name": "Create new Poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93c147e1-76b0-4590-b598-1c96ad23a705",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// schema",
									"const pollSchema = {",
									"  \"required\": [\"id\", \"title\", \"details\", \"creation_date\", \"close_date\", \"acceptance_percentage\", \"anonymity\"],",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\",",
									"      \"minimum\": 0,",
									"    },",
									"    \"title\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"details\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"creation_date\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"close_date\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"acceptance_percentage\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"anonymity\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  }",
									"};",
									"",
									"var data = pm.response.json();",
									"tests[\"Poll is valid\"] = tv4.validate(data, pollSchema);",
									"pm.environment.set(\"pollSchema\", pollSchema);",
									"pm.environment.set(\"pollId\", data.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Create Poll Test 7\",\n\t\"details\": \"descripcion\",\n\t\"creation_date\":\"2018-11-30\",\n\t\"close_date\": \"2019-12-03\",\n\t\"acceptance_percentage\": 50,\n\t\"anonymity\": true,\n\t\"questions\": [\n\t\t{\n\t\t\t\"question\": \"¿Que calificación le darías a la clase de Technical Writing?\", \n\t\t\t\"options\":[\n\t\t\t\t{\"option_text\": \"Muy mala\", \"order_priority\":1},\n\t\t\t\t{\"option_text\": \"Mala\", \"order_priority\":2},\n\t\t\t\t{\"option_text\": \"Mas o menos\", \"order_priority\":3},\n\t\t\t\t{\"option_text\": \"Buena\", \"order_priority\":4},\n\t\t\t\t{\"option_text\": \"Muy buena\", \"order_priority\":5}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"question\": \"¿Que calificación le darías a la clase de Seguridad?\", \n\t\t\t\"options\":[\n\t\t\t\t{\"option_text\": \"Muy mala\", \"order_priority\":1},\n\t\t\t\t{\"option_text\": \"Mala\", \"order_priority\":2},\n\t\t\t\t{\"option_text\": \"Mas o menos\", \"order_priority\":3},\n\t\t\t\t{\"option_text\": \"Buena\", \"order_priority\":4},\n\t\t\t\t{\"option_text\": \"Muy buena\", \"order_priority\":5}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"question\": \"¿Que calificación le darías a la clase de UX?\", \n\t\t\t\"options\":[\n\t\t\t\t{\"option_text\": \"Muy mala\", \"order_priority\":1},\n\t\t\t\t{\"option_text\": \"Mala\", \"order_priority\":2},\n\t\t\t\t{\"option_text\": \"Mas o menos\", \"order_priority\":3},\n\t\t\t\t{\"option_text\": \"Buena\", \"order_priority\":4},\n\t\t\t\t{\"option_text\": \"Muy buena\", \"order_priority\":5}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"question\": \"¿Que calificación le darías a la clase de Desarrollo Web?\", \n\t\t\t\"options\":[\n\t\t\t\t{\"option_text\": \"Muy mala\", \"order_priority\":1},\n\t\t\t\t{\"option_text\": \"Mala\", \"order_priority\":2},\n\t\t\t\t{\"option_text\": \"Mas o menos\", \"order_priority\":3},\n\t\t\t\t{\"option_text\": \"Buena\", \"order_priority\":4},\n\t\t\t\t{\"option_text\": \"Muy buena\", \"order_priority\":5}\n\t\t\t]\n\t\t}\n\t],\n\t\"users\": [\n\t\t\"postmanTest1@mail.com\"\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/polls",
							"host": [
								"{{url}}"
							],
							"path": [
								"polls"
							]
						},
						"description": "The endpoint `POST /polls` create a new poll."
					},
					"response": []
				},
				{
					"name": "Get all polls",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaad5471-c8f1-4005-a644-15a77039d791",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const pollSchema = pm.environment.get(\"pollSchema\");",
									"",
									"pm.test('Matches Poll property value', () => {",
									"    _.each(pm.response.json(), (arrItem) => {",
									"        tests[\"Poll is valid\"] = tv4.validate(arrItem, pollSchema);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/polls",
							"host": [
								"{{url}}"
							],
							"path": [
								"polls"
							]
						},
						"description": "The endpoint `GET /polls` return a set of all created polls."
					},
					"response": []
				},
				{
					"name": "Get poll by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20fda3c2-c914-4d53-b532-8f16bca9c5f2",
								"exec": [
									"",
									"const id = pm.environment.get(\"pollId\");",
									"pm.variables.set('POLL_ID', id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aae8aaf4-89e7-4c13-8222-fcf4c8199a1f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const pollSchema = pm.environment.get(\"pollSchema\");",
									"var resData = pm.response.json();",
									"",
									"tests[\"Poll is valid\"] = tv4.validate(resData, pollSchema);",
									"",
									"pm.test(\"Correct id\", function () {",
									"    pm.expect(resData.id).to.eql(pm.environment.get(\"pollId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/polls/{{POLL_ID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"polls",
								"{{POLL_ID}}"
							]
						},
						"description": "The endpoint `GET /polls/{{POLL_ID}}` return the poll with the Id."
					},
					"response": []
				}
			],
			"description": "The polls genereated by admin users for paneslist users to participate in."
		},
		{
			"name": "Votes",
			"item": [
				{
					"name": "Create a new anonymous Vote",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa97557b-4229-416a-bfbd-62638716687d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = pm.response.json();",
									"",
									"pm.environment.set(\"voteUCode\", data.unique_code);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "967431ae-ad11-4e17-9ebf-8501a05a00c4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{pollId}},\r\n    \"acceptance_percentage\": 50,\r\n    \"anonymity\": true,\r\n    \"questions\": [\r\n        {\r\n            \"question\": \"¿Que calificación le darías a la clase de Technical Writing?\",\r\n            \"order_priority\": 1,\r\n            \"response\": 4,\r\n            \"options\": [\r\n                {\r\n                    \"option_text\": \"Muy mala\",\r\n                    \"order_priority\": 1\r\n                },\r\n                {\r\n                    \"option_text\": \"Mala\",\r\n                    \"order_priority\": 2\r\n                },\r\n                {\r\n                    \"option_text\": \"Mas o menos\",\r\n                    \"order_priority\": 3\r\n                },\r\n                {\r\n                    \"option_text\": \"Buena\",\r\n                    \"order_priority\": 4\r\n                },\r\n                {\r\n                    \"option_text\": \"Muy buena\",\r\n                    \"order_priority\": 5\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"question\": \"¿Que calificación le darías a la clase de Seguridad?\",\r\n            \"order_priority\": 2,\r\n            \"response\": 3,\r\n            \"options\": [\r\n                {\r\n                    \"option_text\": \"Muy mala\",\r\n                    \"order_priority\": 1\r\n                },\r\n                {\r\n                    \"option_text\": \"Mala\",\r\n                    \"order_priority\": 2\r\n                },\r\n                {\r\n                    \"option_text\": \"Mas o menos\",\r\n                    \"order_priority\": 3\r\n                },\r\n                {\r\n                    \"option_text\": \"Buena\",\r\n                    \"order_priority\": 4\r\n                },\r\n                {\r\n                    \"option_text\": \"Muy buena\",\r\n                    \"order_priority\": 5\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"question\": \"¿Que calificación le darías a la clase de UX?\",\r\n            \"order_priority\": 3,\r\n            \"response\": 2,\r\n            \"options\": [\r\n                {\r\n                    \"option_text\": \"Muy mala\",\r\n                    \"order_priority\": 1\r\n                },\r\n                {\r\n                    \"option_text\": \"Mala\",\r\n                    \"order_priority\": 2\r\n                },\r\n                {\r\n                    \"option_text\": \"Mas o menos\",\r\n                    \"order_priority\": 3\r\n                },\r\n                {\r\n                    \"option_text\": \"Buena\",\r\n                    \"order_priority\": 4\r\n                },\r\n                {\r\n                    \"option_text\": \"Muy buena\",\r\n                    \"order_priority\": 5\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"question\": \"¿Que calificación le darías a la clase de Desarrollo Web?\",\r\n            \"order_priority\": 4,\r\n            \"response\": 1,\r\n            \"options\": [\r\n                {\r\n                    \"option_text\": \"Muy mala\",\r\n                    \"order_priority\": 1\r\n                },\r\n                {\r\n                    \"option_text\": \"Mala\",\r\n                    \"order_priority\": 2\r\n                },\r\n                {\r\n                    \"option_text\": \"Mas o menos\",\r\n                    \"order_priority\": 3\r\n                },\r\n                {\r\n                    \"option_text\": \"Buena\",\r\n                    \"order_priority\": 4\r\n                },\r\n                {\r\n                    \"option_text\": \"Muy buena\",\r\n                    \"order_priority\": 5\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{url}}/votes",
							"host": [
								"{{url}}"
							],
							"path": [
								"votes"
							]
						},
						"description": "The endpoint `POST /votes` creates a new anonymoous vote."
					},
					"response": []
				},
				{
					"name": "Get a vote with code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b8a8b049-7260-46fa-8c3a-6627d0a4671f",
								"exec": [
									"",
									"const UCode = pm.environment.get(\"voteUCode\");",
									"pm.variables.set('CODE', UCode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "65322a65-a56a-494f-a9af-c08cc8e59b7e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const voteSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [\"id\", \"poll_id\", \"poll_anonymity\", \"unique_code\", \"poll\"],",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\",",
									"      \"minimum\": 0,",
									"    },",
									"    \"poll_id\": {",
									"      \"type\": \"integer\",",
									"    },",
									"    \"poll_anonymity\": {",
									"      \"type\": \"boolean\",",
									"    },",
									"    \"unique_code\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"poll\": {",
									"        \"type\": \"object\",",
									"    }",
									"  }",
									"};",
									"",
									"var data = pm.response.json();",
									"tests[\"Vote is valid\"] = tv4.validate(data, voteSchema);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/votes/{{CODE}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"votes",
								"{{CODE}}"
							]
						},
						"description": "The endpoint `GET /votes/{{CODE}}` return the vote with the specified code."
					},
					"response": []
				},
				{
					"name": "Try to vote again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa97557b-4229-416a-bfbd-62638716687d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "967431ae-ad11-4e17-9ebf-8501a05a00c4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{pollId}},\r\n    \"acceptance_percentage\": 50,\r\n    \"anonymity\": true,\r\n    \"questions\": [\r\n        {\r\n            \"question\": \"¿Que calificación le darías a la clase de Technical Writing?\",\r\n            \"order_priority\": 1,\r\n            \"response\": 4,\r\n            \"options\": [\r\n                {\r\n                    \"option_text\": \"Muy mala\",\r\n                    \"order_priority\": 1\r\n                },\r\n                {\r\n                    \"option_text\": \"Mala\",\r\n                    \"order_priority\": 2\r\n                },\r\n                {\r\n                    \"option_text\": \"Mas o menos\",\r\n                    \"order_priority\": 3\r\n                },\r\n                {\r\n                    \"option_text\": \"Buena\",\r\n                    \"order_priority\": 4\r\n                },\r\n                {\r\n                    \"option_text\": \"Muy buena\",\r\n                    \"order_priority\": 5\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"question\": \"¿Que calificación le darías a la clase de Seguridad?\",\r\n            \"order_priority\": 2,\r\n            \"response\": 3,\r\n            \"options\": [\r\n                {\r\n                    \"option_text\": \"Muy mala\",\r\n                    \"order_priority\": 1\r\n                },\r\n                {\r\n                    \"option_text\": \"Mala\",\r\n                    \"order_priority\": 2\r\n                },\r\n                {\r\n                    \"option_text\": \"Mas o menos\",\r\n                    \"order_priority\": 3\r\n                },\r\n                {\r\n                    \"option_text\": \"Buena\",\r\n                    \"order_priority\": 4\r\n                },\r\n                {\r\n                    \"option_text\": \"Muy buena\",\r\n                    \"order_priority\": 5\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"question\": \"¿Que calificación le darías a la clase de UX?\",\r\n            \"order_priority\": 3,\r\n            \"response\": 2,\r\n            \"options\": [\r\n                {\r\n                    \"option_text\": \"Muy mala\",\r\n                    \"order_priority\": 1\r\n                },\r\n                {\r\n                    \"option_text\": \"Mala\",\r\n                    \"order_priority\": 2\r\n                },\r\n                {\r\n                    \"option_text\": \"Mas o menos\",\r\n                    \"order_priority\": 3\r\n                },\r\n                {\r\n                    \"option_text\": \"Buena\",\r\n                    \"order_priority\": 4\r\n                },\r\n                {\r\n                    \"option_text\": \"Muy buena\",\r\n                    \"order_priority\": 5\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"question\": \"¿Que calificación le darías a la clase de Desarrollo Web?\",\r\n            \"order_priority\": 4,\r\n            \"response\": 1,\r\n            \"options\": [\r\n                {\r\n                    \"option_text\": \"Muy mala\",\r\n                    \"order_priority\": 1\r\n                },\r\n                {\r\n                    \"option_text\": \"Mala\",\r\n                    \"order_priority\": 2\r\n                },\r\n                {\r\n                    \"option_text\": \"Mas o menos\",\r\n                    \"order_priority\": 3\r\n                },\r\n                {\r\n                    \"option_text\": \"Buena\",\r\n                    \"order_priority\": 4\r\n                },\r\n                {\r\n                    \"option_text\": \"Muy buena\",\r\n                    \"order_priority\": 5\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{url}}/votes",
							"host": [
								"{{url}}"
							],
							"path": [
								"votes"
							]
						},
						"description": "The endpoint `POST /votes` creates a new anonymoous vote."
					},
					"response": []
				}
			],
			"description": "The votes genereated each time an user participates in a poll.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3f8ad669-d053-49f4-a532-c35ac1b6a274",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eb2ce59a-ef64-4ca4-adda-eaf4bf4f4e22",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Results",
			"item": [
				{
					"name": "Get results by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9e42f71-c821-42b6-a464-e8a97d151f0c",
								"exec": [
									"const id = pm.environment.get(\"pollId\");",
									"pm.variables.set('POLL_ID', id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "342a9cca-6ac6-4dbd-96b7-9b3bb18244ea",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/results/{{POLL_ID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"results",
								"{{POLL_ID}}"
							]
						},
						"description": "The endpoint `GET results/{{POLL_ID}}` return the results of a poll that has ended."
					},
					"response": []
				}
			],
			"description": "The vote results the panelist user can request after a vote has ended."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "19c93360-9c04-477f-b12d-6208982779b5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "70714ec5-80cd-499f-8be8-f41ec3c54bd9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "37243e59-65ca-4c1f-aa33-821fc35df327",
			"key": "authToken",
			"value": "eyJraWQiOiJjOWFzZ3AxQ3pLRk1yZkJwMC1nTmQ4ODdUUlBwRHJmWjI2eVFjUmpCWUowIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmpURk5WX0JlejlOVGx3M3JnMktoLUo5TmlNZ1dwSlZaRnQ3X05SQTlVLTQiLCJpc3MiOiJodHRwczovL2Rldi03NDkyMjEub2t0YXByZXZpZXcuY29tL29hdXRoMi9hdXNndDZpZmkxWlZwM3VtUjBoNyIsImF1ZCI6Ildpa2lwb2xpdGljYSIsImlhdCI6MTU0MzM4Mzc2MywiZXhwIjoxNTQzNDcwMTYzLCJjaWQiOiIwb2FnbmdubXBxbUtCMFM2dDBoNyIsInVpZCI6IjAwdWh2dW40bHd0dGJEc1dQMGg3Iiwic2NwIjpbInBhcnRzX21hbmFnZXIiLCJvcGVuaWQiLCJlbWFpbCJdLCJzdWIiOiJwb3N0bWFuVGVzdDFAbWFpbC5jb20ifQ.tmOLbKL-q6U5B2NSTIFFZBbqO37hJH5de9zElpEBSuEkVuzxXDFdP8t6wN2QHCO0hbNHjVtCqruCYQbKyH_6ibjKh1XV9qbPVguc_Gt_7i__nNYUXCed_AUz9T9IUQEtXqTizTZefP93l0VQJRX725pVYCPnhGADTm1GYxqhugSjP-UueVXVi5Iy1wGDoJZ9h3o2lhkZKy7pTLCr-qM3OcPUu84TwP_4U3WRB-MiND5SqD248Z93K_7n_arU9G2lXaHjAfKqiaeQGhuw6eBQPE3Xx9d89TMEYe0dtQcvGOzmdZ2tppMwij1bgNLhSEU9wfSDuZu3HpSBHZxADO9-uw",
			"type": "string"
		}
	]
}